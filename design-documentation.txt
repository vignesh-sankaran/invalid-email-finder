This document's purpose is to highlight and discuss design decisions that were made in the creation of the invalid-email-finder script

Overview:
The purpose of this script is to capture and record invalid emails that are contained within a mbox file. These files are the backup files of an email address' inbox, so they can get large. 

The script uses a regular expression to parse through an email to see if the conditions for it being invalid are true. The conditions for an email found to be invalid will be discussed below. 

Language:
Python was chosen because of its easy to read syntax and less difficulty in learning it for a newcomer working on this script. The ultimate test of its ease of learning is me having to learn how to use it within a week to make this script :). 

Conditions for an invalid email
Emails that bounce from email servers are delivered in a format called Delivery Status Notifications. Unfortunately, email providers, whether private corporations, universities, or email providers e.g. Gmail, use their own format for sending these messages, making it impossible to use just one method of finding an invalid email. After much researching, I decided to use the following methodology to find invalid emails.

The first check I used to find an invalid email address was to see whether the 

Regular expression: 
To the unitiated eye, regular expressions are the things hackers use to hack :). In fact, they are actually a very useful to searching for patterns in text files. 

The regular expression used to find invalid emails in an .mbox file in this script is this:


Here is a breakdown of what this impossible bunch of symbols, letters, and numbers mean in English:


